FUNCTION_BLOCK robo_fuzzy

VAR_INPUT
	sensor_lateral_esquerdo : REAL;
	sensor_frente_esquerdo : REAL;
	sensor_frente : REAL;
	sensor_frente_direito : REAL;
	sensor_lateral_direito : REAL;
	angulo : REAL;
	distancia : REAL;
END_VAR

VAR_OUTPUT
	motor_esquerdo : REAL;
	motor_direito : REAL;
END_VAR

FUZZIFY sensor_lateral_esquerdo
	TERM muito_perto := (0,1) (0.3,1) (0.65,0);
	TERM perto := TRIAN 0.4 0.7 1;
	TERM longe := TRIAN 0.7 1.2 1.3;
	TERM muito_longe := (1.2,0) (1.5,1) (2,1);
END_FUZZIFY

FUZZIFY sensor_frente_esquerdo
	TERM muito_perto := (0,1) (0.3,1) (0.65,0);
	TERM perto := TRIAN 0.4 0.7 1;
	TERM longe := TRIAN 0.7 1.2 1.3;
	TERM muito_longe := (1.2,0) (1.5,1) (2,1);
END_FUZZIFY

FUZZIFY sensor_frente
	TERM muito_perto := (0,1) (0.3,1) (0.65,0);
	TERM perto := TRIAN 0.4 0.7 1;
	TERM longe := TRIAN 0.7 1.2 1.3;
	TERM muito_longe := (1.2,0) (1.5,1) (2,1);
END_FUZZIFY

FUZZIFY sensor_frente_direito
	TERM muito_perto := (0,1) (0.3,1) (0.65,0);
	TERM perto := TRIAN 0.4 0.7 1;
	TERM longe := TRIAN 0.7 1.2 1.3;
	TERM muito_longe := (1.2,0) (1.5,1) (2,1);
END_FUZZIFY

FUZZIFY sensor_lateral_direito
	TERM muito_perto := (0,1) (0.3,1) (0.65,0);
	TERM perto := TRIAN 0.4 0.7 1;
	TERM longe := TRIAN 0.7 1.2 1.3;
	TERM muito_longe := (1.2,0) (1.5,1) (2,1);
END_FUZZIFY

FUZZIFY angulo
	TERM negativo_grande := TRIAN -180 -120 -70;
	TERM negativo_medio := TRIAN -120 -50 0;
	TERM zero := TRIAN -5 0 5;
	TERM positivo_medio := TRIAN 0 50 120;
	TERM positivo_grande := TRIAN 70 120 180;
END_FUZZIFY

FUZZIFY distancia
	TERM muito_perto := (0,1) (0.2,1) (0.35,0);
	TERM perto := TRIAN 0.25 0.35 0.5;
	TERM longe := TRIAN 0.45 0.6 0.75;
	TERM muito_longe := (0.7,0) (0.85,1) (1,1);
END_FUZZIFY

DEFUZZIFY motor_esquerdo
	TERM negativo_alto := (-1,1) (-0.85,1) (-0.45,0);
	TERM negativo_medio := TRIAN -0.6 -0.45 -0.1;
	TERM zero := TRIAN -0.2 0 0.2;
	TERM positivo_medio := TRIAN 0.1 0.45 0.6;
	TERM positivo_alto := (0.45,0) (0.85,1) (1,1);
	RANGE := (-1 .. 1);
	
	METHOD : COG;
	DEFAULT := 0;
END_DEFUZZIFY

DEFUZZIFY motor_direito
	TERM negativo_alto := (-1,1) (-0.85,1) (-0.45,0);
	TERM negativo_medio := TRIAN -0.6 -0.45 -0.1;
	TERM zero := TRIAN -0.2 0 0.2;
	TERM positivo_medio := TRIAN 0.1 0.45 0.6;
	TERM positivo_alto := (0.45,0) (0.85,1) (1,1);
	RANGE := (-1 .. 1);
	
	METHOD : COG;
	DEFAULT := 0;
END_DEFUZZIFY

RULEBLOCK regras
	RULE 1 : IF (sensor_frente_esquerdo IS muito_perto) AND (sensor_frente IS muito_perto) AND (sensor_frente_direito IS muito_perto) AND (distancia IS muito_perto) THEN motor_esquerdo IS positivo_medio, motor_direito IS negativo_medio;
	RULE 2 : IF (sensor_frente_esquerdo IS perto) AND (sensor_frente IS muito_perto) AND (sensor_frente_direito IS longe) AND  (NOT(distancia IS muito_perto)) THEN motor_esquerdo IS positivo_medio, motor_direito IS negativo_medio;
	RULE 3 : IF (sensor_frente_esquerdo IS perto) AND (sensor_frente IS muito_perto) AND (sensor_frente_direito IS muito_longe) AND  (NOT(distancia IS muito_perto)) THEN motor_esquerdo IS positivo_medio, motor_direito IS negativo_medio;
	RULE 4 : IF (sensor_frente_esquerdo IS longe) AND (sensor_frente IS muito_perto) AND (sensor_frente_direito IS muito_longe) AND  (NOT(distancia IS muito_perto)) THEN motor_esquerdo IS positivo_medio, motor_direito IS negativo_medio;
	
	RULE 5 : IF (NOT(sensor_frente_esquerdo IS muito_perto)) AND (sensor_frente IS muito_perto) AND (sensor_frente_direito IS muito_perto) AND  (NOT(distancia IS muito_perto)) THEN motor_esquerdo IS negativo_medio, motor_direito IS positivo_medio;
END_RULEBLOCK

END_FUNCTION_BLOCK
